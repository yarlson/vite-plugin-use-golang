export function generateJsWrapper(fileId: string, projectRoot: string): string {
  return `// Generated by vite-plugin-use-golang
import '/@vite-golang/wasm_exec.js';
import wasmUrl from '/@vite-golang/${fileId}/main.wasm';

let exports = {};
let initialized = false;

async function init() {
  if (initialized) return exports;

  try {
    const go = new Go();

    // Make exports available to Go
    globalThis.__vite_golang_exports__ = exports;

    const response = await fetch(wasmUrl);
    const { instance } = await WebAssembly.instantiateStreaming(
      response,
      go.importObject
    );

    // Run Go main function
    go.run(instance);

    initialized = true;
    return exports;
  } catch (error) {
    console.error('[use-golang] Failed to initialize WASM module:', error);
    throw error;
  }
}

// Auto-initialize and export
const exportsPromise = init();

export default new Proxy({}, {
  get(target, prop) {
    if (prop === 'then') {
      // Support await on the module
      return exportsPromise.then.bind(exportsPromise);
    }
    return (...args) => {
      return exportsPromise.then(exp => {
        if (typeof exp[prop] === 'function') {
          return exp[prop](...args);
        }
        throw new Error(\`[use-golang] Function '\${String(prop)}' not exported from Go module\`);
      });
    };
  }
});
`;
}
